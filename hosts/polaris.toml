system = "x86_64-linux"

[config]
publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILOeY+TshjtBK5VQu4ZJVJ0ol1PsZxLvIy+YNCOtfZmd"
syncthingDeviceID = "5RMZCHO-M3OA4UH-3PMKBWD-IVJGW4Q-VZBME6O-OCSPMK4-7YOVDAM-QOEDOQC"

profiles = [
  "profiles/hardware/ax41",
  "profiles/default_fs",
  "profiles/k3s",
  "profiles/server",
  "profiles/state",
  "profiles/syncthing",
  "profiles/zram",
]

users.groups.john.gid = 1337
users.users.john.uid = 1337
users.users.john.hashedPassword = "$6$MY8KAtdXlQP5.$TEZbPueD71fYUGviybTjFWCD5s1eWmr9FK9WtoLFKFy3yfLu18KPJ2wAbK8ZVJDo52hsc0vGa4LKYbzb.pwPk0"
users.users.john.openssh.authorizedKeys.keys = [
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyjMuNOFrZBi7CrTyu71X+aRKyzvTmwCEkomhB0dEhENiQ3PTGVVWBi1Ta9E9fqbqTW0HmNL5pjGV+BU8j9mSi6VxLzJVUweuwQuvqgAi0chAJVPe0FSzft9M7mJoEq5DajuSiL7dSjXpqNFDk/WCDUBE9pELw+TXvxyQpFO9KZwiYCCNRQY6dCjrPJxGwG+JzX6l900GFrgOXQ3KYGk8vzep2Qp+iuH1yTgEowUICkb/9CmZhHQXSvq2gAtoOsGTd9DTyLOeVwZFJkTL/QW0AJNRszckGtYdA3ftCUNsTLSP/VqYN9EjxcMHQe4PGjkK7VLb59DQJFyRQqvPXiUyxNloHcu/sDuiKHIk/0qDLHlVn2xc5zkvzSqoQxoXx+P4dDbje1KHLY8E96gLe2Csu0ti+qsM5KEvgYgwWwm2g3IBlaWwgAtC0UWEzIuBPrAgPd5vi+V50ITIaIk6KIV7JPOubLUXaLS5KW77pWyi9PqAGOXj+DgTWoB3QeeZh7CGhPL5fAecYN7Pw734cULZpnw10Bi/jp4Nlq1AJDk8BwLUJbzZ8aexwMf78syjkHJBBrTOAxADUE02nWBQd0w4K5tl/a3UnBYWGyX8TD44046Swl/RY/69PxFvYcVRuF4eARI6OWojs1uhoR9WkO8eGgEsuxxECwNpWxR5gjKcgJQ==",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIJY3QSBIiRKN8/B3nHgCBDpauQBOftphOeuF2TaBHGQSAAAABHNzaDo=",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIAwJWtQ5ZU9U0szWzJ+/GH2uvXZ15u9lL0RdcHdsXM0VAAAABHNzaDo=",
]

boot.kernelParams = [
  "ip=65.108.2.146::65.108.2.129:255.255.255.192:polaris:eth0:none",
]

boot.initrd.availableKernelModules = [
  "r8169",
  "nvme",
  "ahci",
  "usbhid",
]

boot.initrd.network.enable = true
boot.initrd.network.postCommands = "echo 'cryptsetup-askpass' >> /root/.profile"
boot.initrd.network.ssh.enable = true
boot.initrd.network.ssh.port = 2222
## This isn't so nice. Have to copy the file to /keep/secrets and keep it there.
boot.initrd.network.ssh.hostKeys = [
  "/keep/secrets/initrd_ed25519_key",
]
boot.initrd.network.ssh.authorizedKeys = [
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyjMuNOFrZBi7CrTyu71X+aRKyzvTmwCEkomhB0dEhENiQ3PTGVVWBi1Ta9E9fqbqTW0HmNL5pjGV+BU8j9mSi6VxLzJVUweuwQuvqgAi0chAJVPe0FSzft9M7mJoEq5DajuSiL7dSjXpqNFDk/WCDUBE9pELw+TXvxyQpFO9KZwiYCCNRQY6dCjrPJxGwG+JzX6l900GFrgOXQ3KYGk8vzep2Qp+iuH1yTgEowUICkb/9CmZhHQXSvq2gAtoOsGTd9DTyLOeVwZFJkTL/QW0AJNRszckGtYdA3ftCUNsTLSP/VqYN9EjxcMHQe4PGjkK7VLb59DQJFyRQqvPXiUyxNloHcu/sDuiKHIk/0qDLHlVn2xc5zkvzSqoQxoXx+P4dDbje1KHLY8E96gLe2Csu0ti+qsM5KEvgYgwWwm2g3IBlaWwgAtC0UWEzIuBPrAgPd5vi+V50ITIaIk6KIV7JPOubLUXaLS5KW77pWyi9PqAGOXj+DgTWoB3QeeZh7CGhPL5fAecYN7Pw734cULZpnw10Bi/jp4Nlq1AJDk8BwLUJbzZ8aexwMf78syjkHJBBrTOAxADUE02nWBQd0w4K5tl/a3UnBYWGyX8TD44046Swl/RY/69PxFvYcVRuF4eARI6OWojs1uhoR9WkO8eGgEsuxxECwNpWxR5gjKcgJQ==",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIJY3QSBIiRKN8/B3nHgCBDpauQBOftphOeuF2TaBHGQSAAAABHNzaDo=",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIAwJWtQ5ZU9U0szWzJ+/GH2uvXZ15u9lL0RdcHdsXM0VAAAABHNzaDo=",
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK+trOinD68RD1efI6p05HeaNA0SjzeRnUvpf22+jsq+",
]

services.syncthing.enable = true
services.syncthing.devices.SM-G998B.id = "PCFNIXF-AR7YX2B-354IJQW-YP25QM7-N53ES5L-HKB337S-I6JZV34-55LQEAR"
services.syncthing.user = "john"
services.syncthing.group = "users"
services.syncthing.openDefaultPorts = true
services.syncthing.folders."/home/john/Sync".id = "sync"
services.syncthing.folders."/home/john/Sync".devices = [
  "triton",
  "eris",
  "icarus",
  "titan",
  "hyperion"
]
services.syncthing.folders."/home/john/Photos".id = "sm-g998b_7dxn foton"
services.syncthing.folders."/home/john/Photos".devices = [
  "triton",
  "eris",
  "icarus",
  "SM-G998B"
]
services.syncthing.cert = "/run/agenix/syncthing-cert"
services.syncthing.key = "/run/agenix/syncthing-key"
services.syncthing.dataDir = "/home/john/.local/share/syncthing-data"

services.innernet.server.insane.enable = true
services.innernet.server.insane.settings.openFirewall = true
services.innernet.server.insane.settings.cidr = "192.168.104.0/22"
services.innernet.server.insane.settings.listenPort = 51820
services.innernet.server.insane.settings.privateKeyFile = "/run/agenix/wg-home"
services.innernet.server.insane.settings.publicKey = "Ca4OCVKasunoIVyh3vbp/HyLnrPWp7AOwEuV14PS1QY="
services.innernet.server.insane.settings.externalEndpoint = "65.108.2.146:51820"
services.innernet.server.insane.settings.cidrs.home = { cidr = "192.168.104.64/26", parent = "insane" }
services.innernet.server.insane.settings.peers.eris = { ip = "192.168.104.65", cidr = "home", publicKey = "Oya0T0tzAV25A7/Qp3tqKP+2KgGjA/OVuUmKzsTFpRo=", isAdmin = true }
services.innernet.server.insane.settings.peers.titan = { ip = "192.168.104.67", cidr = "home", publicKey = "vNfSS1HsbnRqV6V/RfG0Aq1IoNQPS+IP2O162UlVQQA=" }
services.innernet.server.insane.settings.peers.hyperion = { ip = "192.168.104.68", cidr = "home", publicKey = "zra1G18xLfq29/4DLBYKDr0BfhILaIHyhd09Bwl9Tj8=" }
services.innernet.server.insane.settings.peers.triton = { ip = "192.168.104.69", cidr = "home", publicKey = "gq5yK4X2IqPz74Jc1GQlVb3rgmtuqn8yzlPMeN0UMVI=" }
services.innernet.server.insane.settings.peers.icarus = { ip = "192.168.104.70", cidr = "home", publicKey = "mDghZTpKQTGgeWYZzHiylgAvGY2yYnPdPaN5ja2V9Qw=" }
services.innernet.server.insane.settings.peers.milkyway = { ip = "192.168.104.100", cidr = "home", publicKey = "XPWUeQ4N9zYcyWgIvvp+3eHSsBiqnHuuwu2J/1uHHkE=" }

networking.defaultGateway = "65.108.2.129"
networking.interfaces.eth0.ipv4.addresses = [
  { address = "65.108.2.146", prefixLength = 26 }
]
networking.defaultGateway6 = { address = "fe80::1", interface = "eth0" }
networking.interfaces.eth0.ipv6.addresses = [
  { address = "2a01:4f9:6a:51ed::2", prefixLength = 64 }
]

networking.private-wireguard.enable = true
networking.private-wireguard.ips = [
  "10.65.167.230/32",
  "fc00:bbbb:bbbb:bb01::2:a7e5/128"
]
networking.private-wireguard.privateKeyFile = "/run/agenix/wg-net"
networking.private-wireguard.peers = [
  { allowedIPs = [ "0.0.0.0/0", "::0/0" ], endpoint = "185.65.135.70:51820", publicKey = "615mnBGkvjZnD/vRbyL/6da7YhtctfB+jimN+wfV724=" }
]

system.autoUpgrade = { enable = true, flake = "github:johnae/world", allowReboot = true, dates = "*:0/15", randomizedDelaySec = "5min", enableSentinel = true }

age.secrets.k3s-token.file = "secrets/k3s/token.age"
age.secrets.wg-home.file = "secrets/polaris/wg-home.age"
age.secrets.wg-net.file = "secrets/polaris/wg-net.age"
age.secrets.syncthing-cert = { file = "secrets/polaris/syncthing-cert.age", owner = "1337" }
age.secrets.syncthing-key = { file = "secrets/polaris/syncthing-key.age", owner = "1337" }

networking.firewall.trustedInterfaces = [ "insane" ] ## trust the vpn mesh

networking.firewall.allowedUDPPorts = [ 5349, 3478 ]
networking.firewall.allowedTCPPorts = [ 5349, 3478 ]
networking.firewall.allowedUDPPortRanges = [ { from = 49160, to = 49200 } ]

services.k3s.role = "server"
services.k3s.settings.cluster-init = true
services.k3s.settings.token-file = "/run/agenix/k3s-token"
services.k3s.settings.flannel-iface = "insane"
services.k3s.settings.node-ip = "192.168.104.1"
services.k3s.settings.node-external-ip = "65.108.2.146"
services.k3s.settings.with-node-id = true
services.k3s.settings.advertise-address = "192.168.104.1"
services.k3s.settings.cluster-cidr = "10.128.128.0/21"
services.k3s.settings.service-cidr = "10.129.128.0/22"
services.k3s.settings.cluster-dns = "10.129.128.10"
services.k3s.settings.kubelet-arg.max-pods = 62
services.k3s.settings.kube-controller-manager-arg.node-cidr-mask-size = 25
services.k3s.settings.kube-apiserver-arg.oidc-issuer-url = "https://dex.insane.se"
services.k3s.settings.kube-apiserver-arg.oidc-username-claim = "email"
services.k3s.settings.kube-apiserver-arg.oidc-groups-claim = "groups"
services.k3s.settings.kube-apiserver-arg.oidc-client-id = "dex-auth"
services.k3s.settings.node-label."svccontroller.k3s.cattle.io/enablelb" = "true"
services.k3s.settings.node-label."topology.kubernetes.io/region" = "hetzner"
services.k3s.settings.node-label."topology.kubernetes.io/zone" = "hetzner-fi"
services.k3s.settings.secrets-encryption = true
services.k3s.settings.tls-san = "192.168.104.100"

services.k3s.autoDeploy.cluster-vars.apiVersion = "v1"
services.k3s.autoDeploy.cluster-vars.kind = "ConfigMap"
services.k3s.autoDeploy.cluster-vars.metadata.name = "cluster-vars"
services.k3s.autoDeploy.cluster-vars.metadata.namespace = "flux-system"
services.k3s.autoDeploy.cluster-vars.data.cluster = "home"
services.k3s.autoDeploy.cluster-vars.data.context = "default"
services.k3s.autoDeploy.cluster-vars.data.coturn_relay_ip = "192.168.104.1"
services.k3s.autoDeploy.cluster-vars.data.dns_zone = "insane.se"
services.k3s.autoDeploy.cluster-vars.data.dns_zone_int = "home.k.ill.dev"
services.k3s.autoDeploy.cluster-vars.data.dns_zone_ext = "9000.dev"
services.k3s.autoDeploy.cluster-vars.data.dns_zone_personal = "johnae.dev"
services.k3s.autoDeploy.cluster-vars.data.environment = "production"
services.k3s.autoDeploy.cluster-vars.data.prometheus_remote_write_url = "https://metrics.insane.se/api/v1/push"
services.k3s.autoDeploy.cluster-vars.data.loki_remote_write_url = "https://logs.insane.se/loki/api/v1/push"
services.k3s.autoDeploy.cluster-vars.data.grafana_dns = "grafana.insane.se"
services.k3s.autoDeploy.cluster-vars.data.pod_subnet = "10.128.128.0/21"
services.k3s.autoDeploy.cluster-vars.data.minio_host = "minio.minio.svc.cluster.local"
services.k3s.autoDeploy.cluster-vars.data.loki_bucket = "loki-d78f"
services.k3s.autoDeploy.cluster-vars.data.cortex_bucket = "cortex-d78f"
services.k3s.autoDeploy.cluster-vars.data.github_org = "0b2ce"

services.k3s.autoDeploy.flux-system-repo.apiVersion = "source.toolkit.fluxcd.io/v1beta1"
services.k3s.autoDeploy.flux-system-repo.kind = "GitRepository"
services.k3s.autoDeploy.flux-system-repo.metadata.name = "flux-system"
services.k3s.autoDeploy.flux-system-repo.metadata.namespace = "flux-system"
services.k3s.autoDeploy.flux-system-repo.spec.gitImplementation = "go-git"
services.k3s.autoDeploy.flux-system-repo.spec.interval = "1m0s"
services.k3s.autoDeploy.flux-system-repo.spec.ref.branch = "main"
services.k3s.autoDeploy.flux-system-repo.spec.secretRef.name = "flux-system"
services.k3s.autoDeploy.flux-system-repo.spec.timeout = "20s"
services.k3s.autoDeploy.flux-system-repo.spec.url = "ssh://git@github.com/johnae/flux-system.git"

services.k3s.autoDeploy.flux-components-kustomization.apiVersion = "kustomize.toolkit.fluxcd.io/v1beta1"
services.k3s.autoDeploy.flux-components-kustomization.kind = "Kustomization"
services.k3s.autoDeploy.flux-components-kustomization.metadata.name = "components"
services.k3s.autoDeploy.flux-components-kustomization.metadata.namespace = "flux-system"
services.k3s.autoDeploy.flux-components-kustomization.spec.interval = "5m0s"
services.k3s.autoDeploy.flux-components-kustomization.spec.sourceRef.kind = "GitRepository"
services.k3s.autoDeploy.flux-components-kustomization.spec.sourceRef.name = "flux-system"
services.k3s.autoDeploy.flux-components-kustomization.spec.path = "./clusters/home/components"
services.k3s.autoDeploy.flux-components-kustomization.spec.prune = true
services.k3s.autoDeploy.flux-components-kustomization.spec.validation = "client"
services.k3s.autoDeploy.flux-components-kustomization.spec.postBuild.substituteFrom = [
  { kind = "ConfigMap", name = "cluster-vars" },
  { kind = "Secret", name = "cluster-secrets" }
]

services.k3s.autoDeploy.kured = "pkg:kured-yaml/kured.yaml"
services.k3s.autoDeploy.flux = "pkg:fluxcd-yaml/flux.yaml"

age.secrets.flux-system-secret = { file = "secrets/k3s/flux-system-secret.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/flux-system-secret.yaml" }
age.secrets.sops-age-secret = { file = "secrets/k3s/sops-age-secret.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/sops-age-secret.yaml" }
age.secrets.cluster-secrets = { file = "secrets/k3s/cluster-secrets.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/cluster-secrets.yaml" }

services.k3s.after = [ "innernet-server-insane.service" ]

services.plex = { enable = true, openFirewall = true }
environment.state."/keep".directories = [
  "/var/lib/plex",
  "/var/lib/media",
]