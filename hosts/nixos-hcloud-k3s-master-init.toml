system = "x86_64-linux"

[config]
publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOH1VC2YZT+OCiDodlFaKjCpJOCzgv7OhKFTDpeVwXaJ"

profiles = [
  "profiles/hardware/hcloud",
  "profiles/hcloud-k3s-core",
  "profiles/hcloud-k3s-fs",
  "profiles/tailscale",
]

[config.users.users.root]
extraGroups = []
openssh.authorizedKeys.keys = [
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyjMuNOFrZBi7CrTyu71X+aRKyzvTmwCEkomhB0dEhENiQ3PTGVVWBi1Ta9E9fqbqTW0HmNL5pjGV+BU8j9mSi6VxLzJVUweuwQuvqgAi0chAJVPe0FSzft9M7mJoEq5DajuSiL7dSjXpqNFDk/WCDUBE9pELw+TXvxyQpFO9KZwiYCCNRQY6dCjrPJxGwG+JzX6l900GFrgOXQ3KYGk8vzep2Qp+iuH1yTgEowUICkb/9CmZhHQXSvq2gAtoOsGTd9DTyLOeVwZFJkTL/QW0AJNRszckGtYdA3ftCUNsTLSP/VqYN9EjxcMHQe4PGjkK7VLb59DQJFyRQqvPXiUyxNloHcu/sDuiKHIk/0qDLHlVn2xc5zkvzSqoQxoXx+P4dDbje1KHLY8E96gLe2Csu0ti+qsM5KEvgYgwWwm2g3IBlaWwgAtC0UWEzIuBPrAgPd5vi+V50ITIaIk6KIV7JPOubLUXaLS5KW77pWyi9PqAGOXj+DgTWoB3QeeZh7CGhPL5fAecYN7Pw734cULZpnw10Bi/jp4Nlq1AJDk8BwLUJbzZ8aexwMf78syjkHJBBrTOAxADUE02nWBQd0w4K5tl/a3UnBYWGyX8TD44046Swl/RY/69PxFvYcVRuF4eARI6OWojs1uhoR9WkO8eGgEsuxxECwNpWxR5gjKcgJQ==",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIJY3QSBIiRKN8/B3nHgCBDpauQBOftphOeuF2TaBHGQSAAAABHNzaDo=",
  "sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29tAAAAIAwJWtQ5ZU9U0szWzJ+/GH2uvXZ15u9lL0RdcHdsXM0VAAAABHNzaDo=",
]

[config.age.secrets]
k3s-token.file = "secrets/k3s/token.age"
ts-9k = { file = "secrets/ts-9k.age", owner = "1337" }

#flux-system-secret = { file = "secrets/k3s/flux-system-secret.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/flux-system-secret.yaml" }
#sops-age-secret = { file = "secrets/k3s/sops-age-secret.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/sops-age-secret.yaml" }
#cluster-secrets = { file = "secrets/k3s/cluster-secrets.yaml.age", path = "/var/lib/rancher/k3s/server/manifests/cluster-secrets.yaml" }
hetzner-csi-encryption-secret = { file = "secrets/k3s/hetzner-csi-encryption-secret.yaml.age", path = "var/lib/rancher/k3s/server/manifests/hetzner-csi-encryption-secret.yaml" }
hetzner-api-secret = { file = "secrets/k3s/hetzner-api-secret.yaml.age", path = "var/lib/rancher/k3s/server/manifests/hetzner-api-secret.yaml" }
 
[config.services.tailscale.auth]
enable = true
args.advertise-tags = ["tag:server"]
args.ssh = true
args.accept-routes = false ## with this on, it causes issues in k3s when network runs on top of tailscale
args.accept-dns = true
args.advertise-exit-node = true
args.auth-key = "file:/var/run/agenix/ts-9k"

[config.services.k3s]
enable = true
role = "server"
after = [ "tailscale-auth.service" ]

[config.services.k3s.settings]
cluster-init = true
token-file = "/run/agenix/k3s-token"
flannel-iface = "tailscale0"
node-ip = "\"$(get-iface-ip tailscale0)\""
node-external-ip = "\"$(get-iface-ip eth0)\""
advertise-address = "\"$(get-iface-ip tailscale0)\""
cluster-cidr = "10.128.128.0/21"
service-cidr = "10.129.128.0/22"
cluster-dns = "10.129.128.10"
kubelet-arg.max-pods = 62
kube-controller-manager-arg.node-cidr-mask-size = 25
kube-apiserver-arg.oidc-issuer-url = "https://id.9000.dev"
kube-apiserver-arg.oidc-username-claim = "email"
kube-apiserver-arg.oidc-groups-claim = "groups"
kube-apiserver-arg.oidc-client-id = "dex-auth"
node-label."svccontroller.k3s.cattle.io/enablelb" = "true"
node-label."topology.kubernetes.io/region" = "hetzner"
node-label."topology.kubernetes.io/zone" = "hetzner-fi"
secrets-encryption = true
node-taint = "CriticalAddonsOnly=true:NoExecute"
tls-san = ["k8s-master-0", "k8s-master-0.taileb01.ts.net","k8s-master-1", "k8s-master-1.taileb01.ts.net","k8s-master-2", "k8s-master-2.taileb01.ts.net"]

[config.services.k3s.autoDeploy]
kured = "${pkgs.kured-yaml}/kured.yaml"
flux = "${pkgs.fluxcd-yaml}/flux.yaml"
hetzner-csi-driver = "${pkgs.hetzner-csi-driver-yaml}/hetzner-csi-driver.yaml"

[config.services.k3s.autoDeploy.cluster-vars]
apiVersion = "v1"
kind = "ConfigMap"
metadata.name = "cluster-vars"
metadata.namespace = "flux-system"
data.cluster = "home"
data.context = "default"
data.coturn_relay_ip = "192.168.104.1"
data.cluster_dns_zone = "home.k.ill.dev"
data.cluster_dns_root_zone = "ill.dev"
data.main_dns_zone = "9000.dev"
data.private_dns_zone = "insane.se"
data.personal_dns_zone = "johnae.dev"
data.environment = "production"
data.prometheus_remote_write_url = "https://metrics.home.k.ill.dev/api/v1/push"
data.loki_remote_write_url = "https://logs.home.k.ill.dev/loki/api/v1/push"
data.grafana_dns = "grafana.9000.dev"
data.pod_subnet = "10.128.128.0/21"
data.minio_host = "minio.minio.svc.cluster.local"
data.loki_bucket = "loki-d78f"
data.cortex_bucket = "cortex-d78f"
data.github_org = "9k-dev"

[config.services.k3s.autoDeploy.flux-system-repo]
apiVersion = "source.toolkit.fluxcd.io/v1beta1"
kind = "GitRepository"
metadata.name = "flux-system"
metadata.namespace = "flux-system"
spec.gitImplementation = "go-git"
spec.interval = "1m0s"
spec.ref.branch = "main"
spec.secretRef.name = "flux-system"
spec.timeout = "20s"
spec.url = "ssh://git@github.com/johnae/flux-system.git"

[config.services.k3s.autoDeploy.flux-components-kustomization]
apiVersion = "kustomize.toolkit.fluxcd.io/v1beta1"
kind = "Kustomization"
metadata.name = "components"
metadata.namespace = "flux-system"
spec.interval = "5m0s"
spec.sourceRef.kind = "GitRepository"
spec.sourceRef.name = "flux-system"
spec.path = "./clusters/home/components"
spec.prune = true
spec.validation = "client"
spec.postBuild.substituteFrom = [
  { kind = "ConfigMap", name = "cluster-vars" },
  { kind = "Secret", name = "cluster-secrets" }
]

[config.services.k3s.autoDeploy.dex-auth-gh-admins]
apiVersion = "rbac.authorization.k8s.io/v1"
kind = "ClusterRoleBinding"
metadata.name = "dex-auth-gh-admins"
roleRef.apiGroup = "rbac.authorization.k8s.io"
roleRef.kind = "ClusterRole"
roleRef.name = "cluster-admin"
subjects = [
  { apiGroup = "rbac.authorization.k8s.io", kind = "Group", name = "9k-dev:Admins" }
]

[config.services.k3s.autoDeploy.cluster-read-all-role]
apiVersion = "rbac.authorization.k8s.io/v1"
kind = "ClusterRole"
metadata.name = "cluster-read-all"

[[config.services.k3s.autoDeploy.cluster-read-all-role.rules]]
apiGroups = [
  "",
  "apps",
  "autoscaling",
  "batch",
  "extensions",
  "policy",
  "rbac.authorization.k8s.io",
  "storage.k8s.io"
]
resources = [
  "componentstatuses",
  "configmaps",
  "cronjobs",
  "daemonsets",
  "deployments",
  "events",
  "endpoints",
  "horizontalpodautoscalers",
  "ingress",
  "ingresses",
  "jobs",
  "limitranges",
  "namespaces",
  "nodes",
  "pods",
  "pods/log",
  "pods/exec",
  "persistentvolumes",
  "persistentvolumeclaims",
  "resourcequotas",
  "replicasets",
  "replicationcontrollers",
  "serviceaccounts",
  "services",
  "statefulsets",
  "storageclasses",
  "clusterroles",
  "roles",
]
verbs = [
  "get",
  "watch",
  "list",
]

[[config.services.k3s.autoDeploy.cluster-read-all-role.rules]]
apiGroups = [""]
resources = ["pods/exec"]
verbs = ["create"]

[[config.services.k3s.autoDeploy.cluster-read-all-role.rules]]
nonResourceURLs = ["*"]
verbs = [
  "get",
  "watch",
  "list",
]

[config.services.k3s.autoDeploy.dex-auth-gh-viewers]
apiVersion = "rbac.authorization.k8s.io/v1"
kind = "ClusterRoleBinding"
metadata.name = "dex-auth-gh-viewers"
roleRef.apiGroup = "rbac.authorization.k8s.io"
roleRef.kind = "ClusterRole"
roleRef.name = "cluster-read-all"
subjects = [
  { apiGroup = "rbac.authorization.k8s.io", kind = "Group", name = "9k-dev:Viewers" }
]

[config.services.k3s.autoDeploy.encrypted-storage-class]
apiVersion = "storage.k8s.io/v1"
kind = "StorageClass"
metadata.name = "hcloud-volumes-encrypted"
provisioner = "csi.hetzner.cloud"
reclaimPolicy = "Delete"
volumeBindingMode = "WaitForFirstConsumer"
allowVolumeExpansion = true
parameters."csi.storage.k8s.io/node-publish-secret-name" = "encryption-secret"
parameters."csi.storage.k8s.io/node-publish-secret-namespace" = "kube-system"