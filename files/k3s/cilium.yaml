---
# Source: cilium/templates/cilium-agent-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-client-tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRWWtuU2J0MUxkS2U3MlErSEVSWkZWVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl4TURneU5USXlOVE0wT1ZvWApEVEkwTURneU5ESXlOVE0wT1Zvd0hqRWNNQm9HQTFVRUF4TVRhSFZpWW14bExXTmhMbU5wYkdsMWJTNXBiekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDgvWFlIUXBZelZJQWtLZVRZV2owdTgKRmtsMkpKYmc5L1lXYzl1MU53QytJbStSQitHbXhuWU01aDZHUkt1OTM3UW04YUg1d25tY3pBNGxaYmlnd3hBeQpMMkFSQWxtN3RreWFuU3VCZUtRMG02amFkZG4wWnFYUVpacW5JVGQwNGpGS3duUmFkQlJGQkxKMEMweXdhQXV3CmhLM1FPdmRmM0RiK3hWWmdwVmJrcVloaFM1ZkJYMnNBSXkrdFlFUXJFZFBTMGUvYnEvWGZHaFdTcG5oTlRSajAKK3pnSGRjOFVDM2lMbVBzS21jSEtLejBVUVpOd3pYOU93anlpQTVzdlI1N3FkRVR0Z2h1ZWl1QVpueDluWnFrUgpIL0RtRENUUmJLb2M2bEQxVkhXT0tBaFczbEoyUko3cXd3KzJLQWdwSFc2bCttbWFXL3ZVQjRSZytEY01UcmtDCkF3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJIMmJrMkhZa2JsbjlzWlVGcQpaWUx2YUtnMGlEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF1RzBGSTdNT0JoZlZ2QytaVGFyL21wUld2TWdQCnJWN1FjQVVTNDRpTEtzcWVtcEdRZG15MTk0Ly9KZWMwS1ZoaXU1K3hXY0wxblBOdDhGWUV4SDZMckszTWROVVQKVVA2Y0hnM1lBL2E3TnFvNFhJNDFuWXpScU1HV0FGSWZvNmxKc05tZ2VJYzA1ZzRmZ0gwb0Jxd2Z5UWdISWJEcAo5V1I0a0h3R0pub3YyTFJta0dIbVoyRWtRLzNQNklsakU0eGF3Nkd4MmJPbW1HZ0M5N1Y3czJaMVhXaFl0VERiCnpiZW9iK2pNYzVpaWZaaVFGMDQvcmZIWVdUektmN205ZEdvQ01Pcm9pcFZWK2pIVnJ2d0IwUDRjN3BQR3laNEYKU1djcis1c0RoUldtUTBzRCttSmMvVFBMRUNObU84K3Z2dG1sblFxOThCeFZRTWhMZVIzZ1Z0ODVnQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVakNDQWpxZ0F3SUJBZ0lRTWZNT3o1UzVKeWFJM0Z2YXQxNTJjVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl4TURneU5USXlOVE0wT1ZvWApEVEkwTURneU5ESXlOVE0wT1Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0CkxtbHZNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXFDWWYvek9OeURGa0ZPOXQKRkJyL0RYY0tLNGNiZjFBS3lLTzFWVXBaRHg0VFUxK01NcHVoaVd3bzhZbXQ4ZnNUUzFvNFQ3aEx2eEpWb05JUwp5bktIQ3RSYldnaDc1dnVveW82NmVZL0RkOWFZaStGRENyZVZRYmIxU3R0OStTbHVEczVBa3VvcjB6eTlzQW9mCjlMaS9HWkUxanRwNlFiWWR4OGtYZlR3cU5wU0lXblorOEg4V0VKZ0d4S0JHZFZOdXNXS2plY1EwREs2UlVrWUwKNmxrYVNjYzhucG96Sk1YeXFvbG9PdUd0b3ZwUmV2STNadmZibmF4UVppMll6TnZBaHJVQmRqRTFoYVZVNkhNeAp6eDhxS3pvL1dReTBCTlI0R1BySmpxeVZDdzVnY1RmS1l2NUluaEdQdnhITUVlN0ZvYlN0OG12UHk0Um5QU3VPCmx3djQvUUlEQVFBQm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUYKQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUkgyYmsySFlrYgpsbjlzWlVGcVpZTHZhS2cwaURBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1CmFXOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRktEV2Ura2RlMWovU3FOWUJKU3BMODdyTlhxM20zQ0NVMlQKUzZKd3MxYkVBVFhITzdZN1FVOE1iZTdnTWx6NW9Sb0dNSE5FajErWVhEcGVvZEEzR1FJRExrS3BBSFNkSm5LeQpTYytRbWFTMDBaRzIxRkFBalFBU2JYMURORkdaOUJSZjJZd0cvdmRzRk4yalZGcVJ2Um1GcnhmSC9JRE1mTG9HCmg5WGFsN25ySUN1dTdpRjJjRmp2dU1aSjdHSDQ2cHJpOUhRVi9PZ21LWU9HcXZXZDhJVXZuTVlVbE85dVVBZnIKQXQ0OWM5OWxta2pHSDV3cndxMzBMOHlaMDRpRWFGdThTTnRXL25odnV0TDUwRG9nYTVJRDFyb0lMQ2tCcWVwYgpDdk5QL3lYK0RRd0lsWWNHR2VGUEVQNEk2c3czSVU4NWxYcUhNaXNrNkRENE9HYnlQWVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcUNZZi96T055REZrRk85dEZCci9EWGNLSzRjYmYxQUt5S08xVlVwWkR4NFRVMStNCk1wdWhpV3dvOFltdDhmc1RTMW80VDdoTHZ4SlZvTklTeW5LSEN0UmJXZ2g3NXZ1b3lvNjZlWS9EZDlhWWkrRkQKQ3JlVlFiYjFTdHQ5K1NsdURzNUFrdW9yMHp5OXNBb2Y5TGkvR1pFMWp0cDZRYllkeDhrWGZUd3FOcFNJV25aKwo4SDhXRUpnR3hLQkdkVk51c1dLamVjUTBESzZSVWtZTDZsa2FTY2M4bnBvekpNWHlxb2xvT3VHdG92cFJldkkzClp2ZmJuYXhRWmkyWXpOdkFoclVCZGpFMWhhVlU2SE14eng4cUt6by9XUXkwQk5SNEdQckpqcXlWQ3c1Z2NUZksKWXY1SW5oR1B2eEhNRWU3Rm9iU3Q4bXZQeTRSblBTdU9sd3Y0L1FJREFRQUJBb0lCQVFDVUlrSStDYVQyb015Uwp4UHRMb3h6Zk4rZjF3T2t3bDh0b1J4RVJPcGFMQXV2em4xRmJwRkFEU1E0by9Db0o3QzlyU3VnaEV6Tm4rVGNHCm53dCszcmFwaTd1TzdicDZHMnJ3U0IxdnluOWhxK1JvRnVPQkpZcVFnaVpHOUdkZWdtazdFZWxCaEp0blZUT24KU3NRc1REWE95R1p1bTNycE9RK3pXaTBmWDBteEdtdEVTTlJ1VXlGSUdWV2VWRTRJMGVCd0RDRTRHUUFRZyt6ZgppbzRCZjF6MStvZldEelhNUkRRd0xpNzdBM3lmNnpQK1V6UXpMMkpiNlRBYWM3b0dhaksvY0FCK1loZm5kWExYCkljZEtZNlQzYVFrWmx2YWFzUzhyM3luMEk1MzhXcUxUM1QvQy9oOGFWcEEyZlJqVDZncXFaNFlnR1lOY1cwLy8KSmg4Q2YxM2hBb0dCQU1JU2JkN3BsUm1UU0JKOVZqRCtQN3JiR01QalZJWHZYeXdxUEZaQ0F3S0NabHo0a2ZWbQpONGlBSzRyTm1paUtGWDRNMXpITWFJaTl3c3REQW5Mb2tHT3lOL1A0WUtQeERtZERxbzhaVEdVbTB3ZHl4dVUwClVPTkxack5ORmI4cEFLbjdMZHgwRE1uYTdhWnNhb0pKZjhJMUZoMzFoenlrbTQvdUw0WU9PVEJmQW9HQkFOM08KRUQrVk9wUjR5N20zVFFJM2VmWk5mVElLZEdXc29rM29NUFBKUkF0cE0vbmNEMXFhWGI3Uk55cy9KN1FMKzUzdQpqWEZXdU0wWWk0Q0NpUVdqYnVaMEVGNE9Ha0JPd2QvY1Bid3BGL3BhYm1HalgySFdlV1NBNVZPMjFaTmZudmt3CnNPb2pCbncweldKbXRQdTlrUW1CZDVPYmoxSWJMSnU5anZjNHN5UWpBb0dCQUttMzlpL0lOR1VlWVJ3U1Vpc2MKWGQxcU43a3ZlRDU4L00waHpveGN4RWNRaExadmh5MkZpN0VxN1dsQXJyMGZMUGFFQWptQm1qVmpSaFA5OFFsTwppdDgwL3l1em5jZ2hTa2hTYTdrakZhVXNFOGJpd0QrM3hibFF1bXE1VWZoUHdrM2s1TkZ6QjdBTGJtTnBVcWZICjRSdVUwMWUxM2VQUnpGMU5ubS9zeG1TZkFvR0FVTzlpU25FL29QRzdGUmRueUVsSi9iQWs0Titqdlg0UzgyNm8KZml5UTRjRVBzRHEyZDQ4Z2FnS1pxUFF3bnFoSXRrWlg0bVdNcFhveFhVRkVrb1FpY1lFa2Y4MlJrcW1xWU85UwpyNWduSWJsaDBjcjFnUlByMDlxYzA4RkJpYmM0b1NFOVRSSmV5Vy9UQ2ZjRVQxL0t6cmNwVlBsTWdOOWRsYTdECnZqNDRVQlVDZ1lFQWhTQkhFaHo4RTY4eHlMYk51N2orM3A3T0FPV3UyZTNwTzY3U0dMNFQ1QTZDby9GK0xEblYKdkpUUmZvZ3RrSVluaS9Ock9TVVgrckVGbm1yZHpSZWpodHpacVBvSU1CNy8vbm9IRDZDQk5hSGhhTGJUVkl3MgpDMVorbEVzU0VhU21nSXR5ZVhxVmV4bmNJbFNTY3BTS3ZVT0Z0SVRySkxraFhYbTlDb0lEU253PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble-server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRWWtuU2J0MUxkS2U3MlErSEVSWkZWVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl4TURneU5USXlOVE0wT1ZvWApEVEkwTURneU5ESXlOVE0wT1Zvd0hqRWNNQm9HQTFVRUF4TVRhSFZpWW14bExXTmhMbU5wYkdsMWJTNXBiekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDgvWFlIUXBZelZJQWtLZVRZV2owdTgKRmtsMkpKYmc5L1lXYzl1MU53QytJbStSQitHbXhuWU01aDZHUkt1OTM3UW04YUg1d25tY3pBNGxaYmlnd3hBeQpMMkFSQWxtN3RreWFuU3VCZUtRMG02amFkZG4wWnFYUVpacW5JVGQwNGpGS3duUmFkQlJGQkxKMEMweXdhQXV3CmhLM1FPdmRmM0RiK3hWWmdwVmJrcVloaFM1ZkJYMnNBSXkrdFlFUXJFZFBTMGUvYnEvWGZHaFdTcG5oTlRSajAKK3pnSGRjOFVDM2lMbVBzS21jSEtLejBVUVpOd3pYOU93anlpQTVzdlI1N3FkRVR0Z2h1ZWl1QVpueDluWnFrUgpIL0RtRENUUmJLb2M2bEQxVkhXT0tBaFczbEoyUko3cXd3KzJLQWdwSFc2bCttbWFXL3ZVQjRSZytEY01UcmtDCkF3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJIMmJrMkhZa2JsbjlzWlVGcQpaWUx2YUtnMGlEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF1RzBGSTdNT0JoZlZ2QytaVGFyL21wUld2TWdQCnJWN1FjQVVTNDRpTEtzcWVtcEdRZG15MTk0Ly9KZWMwS1ZoaXU1K3hXY0wxblBOdDhGWUV4SDZMckszTWROVVQKVVA2Y0hnM1lBL2E3TnFvNFhJNDFuWXpScU1HV0FGSWZvNmxKc05tZ2VJYzA1ZzRmZ0gwb0Jxd2Z5UWdISWJEcAo5V1I0a0h3R0pub3YyTFJta0dIbVoyRWtRLzNQNklsakU0eGF3Nkd4MmJPbW1HZ0M5N1Y3czJaMVhXaFl0VERiCnpiZW9iK2pNYzVpaWZaaVFGMDQvcmZIWVdUektmN205ZEdvQ01Pcm9pcFZWK2pIVnJ2d0IwUDRjN3BQR3laNEYKU1djcis1c0RoUldtUTBzRCttSmMvVFBMRUNObU84K3Z2dG1sblFxOThCeFZRTWhMZVIzZ1Z0ODVnQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRVHdFWGFWamhPVHVzUXA3TFJ6SkxaREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl4TURneU5USXlOVE0wT1ZvWApEVEkwTURneU5ESXlOVE0wT1Zvd0tqRW9NQ1lHQTFVRUF3d2ZLaTVrWldaaGRXeDBMbWgxWW1Kc1pTMW5jbkJqCkxtTnBiR2wxYlM1cGJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUo2aUlQcFIKZ1pmNTFGYU56eWhZNWtQSnVpY0IyM2k1M1ArdnpPSWlyTkh2R1ZXeHBKaE1TekNkamszRjhGRXpiWjJ0anpINwpKaUJTQkgwcnJhcUw2UTdGNkxWZjltN21TTWliMmQyQllRQitNN1MzTmtKbEZ0WHBqRnZxUWNvNDF3YU9IMnVHCkRjaVdnQ084dVBuWnVTejVLK0lBLzJidHJOTndsMDNXTWpiemRuenRqQ2RTaTJueWpRUUJkQTJybmFESlN6aXgKQjliUzRWVFdHd2lJY3IrRTVRVk9RaDB6Rmw5cWswQWI4bCs3bXgyNDRTcWVmWWRrUkpFRnlsMEpkNkFqLzY1bwplTDVlby9BZFQ5OE92NDRMZUlVSm9kTXpyZkEzZ1E2b2FSZ3RmZkVHbE9UUzk0NUg1eVZmcGsxL2ZIMXd1YnZaCjNpdVpLa001aFJHNVloc0NBd0VBQWFPQmpUQ0JpakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXcKRkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVQpSOW01TmgySkc1Wi9iR1ZCYW1XQzcyaW9OSWd3S2dZRFZSMFJCQ013SVlJZktpNWtaV1poZFd4MExtaDFZbUpzClpTMW5jbkJqTG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQU0xYXkzMVNTZHpVcjVjM3IKYWpxTE9yMllETzZHQTdNWDVFSUJEM1h5Wkkzc3dSNDNmclNkUWxESkJBY1lTOVFHc1ByVys4RHIybkN4dUcydAp1M0pFaVoyOHZxUjlvYnVKdGJ3K2ZmRUdTam1TWnQzVXJoODM3VG81YUNkN1U4RXNURy9TQ3o0a3h5WFhWL0l6CmRJc245amo0NTJuRDc3MmRLTUszR3dzaUZtcUViWHQxWm5LWlBGaE14YW5DeWRJOTZ5RUVEZnR4Wm1FOWlVNGwKa2hnWitaell0MkxFakRGUHhNUVRiMVZVL2UveU9oWlF4bzI3ODFUQ0x6bThwMkp2cmhVQ0lWU3V2a3p6UXF1OApRa2wrbU5CalFNbnBMSkVsWXBIY2UzNlJPMURJNXdRWjdoUUYrdWYxc0puWkNIcUdyc2NJOUo0VUxIeFhhdlEwCmJjREd4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbnFJZytsR0JsL25VVm8zUEtGam1ROG02SndIYmVMbmMvNi9NNGlLczBlOFpWYkdrCm1FeExNSjJPVGNYd1VUTnRuYTJQTWZzbUlGSUVmU3V0cW92cERzWG90Vi8yYnVaSXlKdlozWUZoQUg0enRMYzIKUW1VVzFlbU1XK3BCeWpqWEJvNGZhNFlOeUphQUk3eTQrZG01TFBrcjRnRC9adTJzMDNDWFRkWXlOdk4yZk8yTQpKMUtMYWZLTkJBRjBEYXVkb01sTE9MRUgxdExoVk5ZYkNJaHl2NFRsQlU1Q0hUTVdYMnFUUUJ2eVg3dWJIYmpoCktwNTloMlJFa1FYS1hRbDNvQ1Avcm1oNHZsNmo4QjFQM3c2L2pndDRoUW1oMHpPdDhEZUJEcWhwR0MxOThRYVUKNU5MM2prZm5KVittVFg5OGZYQzV1OW5lSzVrcVF6bUZFYmxpR3dJREFRQUJBb0lCQUNJRk5UdFoxWWdwVFErTwo5Qmw4RDA0RWFrYkpVQzh3OVNOa3FYVHA2TlJSQ2NibUJSMmdaeE96Qm56SmNZT0ltdjZRNVQvYjA4NWtxSS9MCm1VQVZKMU5Dd0doOWZ4VkRqK0p1QWloT0FlYWdLaWljamlkcEZKK2xxYk5ncHVGZWxVYlRuZ3RxUVhSK1NsYmYKdDIvbDhKK2poSFRBc0FWNy9XK1BHdlBYZHdkdmtzU2xSVVYvWlFYNW5vZStjZUhoNURBNGxaaDlPeG1adU5HMQo3MzhwSnBkdWR6UzZVZ3E0UFRjU3JZQ2N5YUlQbnZkcWlha0ZMeHRmdEt3UjFHR1FtRXBoZUorc2NmUHBvaGNWClQ1VUluWXh0R09STlY5dmx4YXhJQ1hNeVVTeUdxTlZ2Q2FpM0Y2MlNucHpjMVYvcmh6ZVVwUXNjbnB0ZVRlN1YKcUw4bDZNRUNnWUVBdzNuVHk2bzY2TE9FRmhZZFpmS1N4WFAwdnd6MWRxQ3ZsL3RheXRnekV0WEUrWGtPK21XRQpxNFJKQjBENTRvbk5JUDgyZ2dzZGhKYWNidWFlNmZHbGt3SkVHUnJJQkMzRnR5UjRGZ28wUk9OZEEzU24xWW5CCjA3aDhtQ2R3ZDVkZEovU0pGbGV6MWcyS3hLdmZHdVVlRFh2THg1bU1BZndSVzJ5UDRVeXNkU0VDZ1lFQXo4QUUKWTJIUVIvL1hVSFJQMFI1dk1rdjJYK1FRS1VqWTFtMjBNVGtWTEp5RlJ2Rm1KMEpYTU9TUlk3aEdVbC92ZzhXaQpHV2hGcnRwNHYzZDNSNFhOR2NRY1I5SEZzUjdTTUxQNldNVmkwZHR0MCtFdlV0bEZQRXpLZk43cXlBejA0cGtQCnUrLytHZmZqOGhiS25nSkdGM2VhQ3Rya2Z3NlFna04vNnpEaWM3c0NnWUFLS2p1cFM2RGttUEUxZE5EeWpEcTEKcWVJQVRWdzJYd1RDa24rV0xNZjdJc0tyZG5BZzlVYUE1TkFuWUdtZUxpeE1tdmpxcWtsT3E4Wld2Z2RsZ3Z0cApPYVR3NlVPZGRBUGtFakZzYy90ajJhN3NqeFJyTms2dUE5bjJ6NVk1b2RWbVRvRVNlRjBSdElLUzE1MHllTmVuCk85ak0rRjhmZTB3cnhPbDJmZFk2QVFLQmdIR045VmdWS1BHUjZERHp3b1Q5YTY1RVV5REsyZ0tXN044WUM3dzAKQlZ6akdQNVVDSkJBOU1PbXk4bUQrZndnc0J5SXREZkxCUHUwTXZnRTVzL1RWTzVXZ1ZiSVZKU2gwaVlJMmpnWApmQkpWTEV6NTh4SUg3STR2TXliWitkN3JKaGVOcmtuOXZoaVhwS0s0em50YnB0QkE4WlFwWFdnTm4vTnp6Y0hTCmNKVHRBb0dBWTlkejZBSXhOazlRWFdRV2xSZmxUYjZJNlhMdWx6SGVoN2hqL3ZkS2owWmZSRGIvR2wwd0RzL0sKZFU5Y1pjVFg2eUgwUHZ0VzZZM3N0elBwQjNqQUpaZ1NNc3lmRE51MU1CZm5BcElaWVNaTzZteEsva1oxclhZRwpKOVgvM3hsYy9BS25mQzZWQTg3VDFGYk9lOWlGYmZ2UnIySVd4Z0VHOFp0TmFQYVBYT2M9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in a kvstore, etcd or consul, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  cilium-endpoint-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes
  enable-policy: "default"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: 5s

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass
  # optimization for nodeport reverse NAT handling.
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: ""

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: vxlan
  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  # wait-bpf-mount makes init container wait until bpf filesystem is mounted
  wait-bpf-mount: "false"

  enable-ipv4-masquerade: "true"
  enable-ipv6-masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-iptables-rules: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-bandwidth-manager: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement:  "disabled"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-session-affinity: "true"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path:  "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  cluster-pool-ipv4-cidr: "10.128.128.0/24"
  cluster-pool-ipv4-mask-size: "26"
  disable-cnp-status-updates: "true"
  cgroup-root: "/run/cilium/cgroupv2"
---
# Source: cilium/templates/hubble-ca-configmap.yaml
# NOTE: the hubble-ca-cert ConfigMap is deprecated and will be removed in v1.11
# The Hubble CA certificate can be found in both the hubble-server-certs and
# hubble-relay-client-certs Secrets under the ca.crt key.
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ca-cert
  namespace: kube-system
data:
  ca.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDJzCCAg+gAwIBAgIQYknSbt1LdKe72Q+HERZFVTANBgkqhkiG9w0BAQsFADAe
    MRwwGgYDVQQDExNodWJibGUtY2EuY2lsaXVtLmlvMB4XDTIxMDgyNTIyNTM0OVoX
    DTI0MDgyNDIyNTM0OVowHjEcMBoGA1UEAxMTaHViYmxlLWNhLmNpbGl1bS5pbzCC
    ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL8/XYHQpYzVIAkKeTYWj0u8
    Fkl2JJbg9/YWc9u1NwC+Im+RB+GmxnYM5h6GRKu937Qm8aH5wnmczA4lZbigwxAy
    L2ARAlm7tkyanSuBeKQ0m6jaddn0ZqXQZZqnITd04jFKwnRadBRFBLJ0C0ywaAuw
    hK3QOvdf3Db+xVZgpVbkqYhhS5fBX2sAIy+tYEQrEdPS0e/bq/XfGhWSpnhNTRj0
    +zgHdc8UC3iLmPsKmcHKKz0UQZNwzX9OwjyiA5svR57qdETtghueiuAZnx9nZqkR
    H/DmDCTRbKoc6lD1VHWOKAhW3lJ2RJ7qww+2KAgpHW6l+mmaW/vUB4Rg+DcMTrkC
    AwEAAaNhMF8wDgYDVR0PAQH/BAQDAgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggr
    BgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRH2bk2HYkbln9sZUFq
    ZYLvaKg0iDANBgkqhkiG9w0BAQsFAAOCAQEAuG0FI7MOBhfVvC+ZTar/mpRWvMgP
    rV7QcAUS44iLKsqempGQdmy194//Jec0KVhiu5+xWcL1nPNt8FYExH6LrK3MdNUT
    UP6cHg3YA/a7Nqo4XI41nYzRqMGWAFIfo6lJsNmgeIc05g4fgH0oBqwfyQgHIbDp
    9WR4kHwGJnov2LRmkGHmZ2EkQ/3P6IljE4xaw6Gx2bOmmGgC97V7s2Z1XWhYtTDb
    zbeob+jMc5iifZiQF04/rfHYWTzKf7m9dGoCMOroipVV+jHVrvwB0P4c7pPGyZ4F
    SWcr+5sDhRWmQ0sD+mJc/TPLECNmO8+vvtmlnQq98BxVQMhLeR3gVt85gA==
    -----END CERTIFICATE-----
---
# Source: cilium/templates/hubble-relay-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    peer-service: unix:///var/run/cilium/hubble.sock
    listen-address: :4245
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-envoy
  namespace: kube-system
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_hubble_ui
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/api/"
                              route:
                                cluster: backend
                                prefix_rewrite: "/"
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match:
                                prefix: "/"
                              route:
                                cluster: frontend
                          cors:
                            allow_origin_string_match:
                              - prefix: "*"
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                            max_age: "1728000"
                            expose_headers: grpc-status,grpc-message
                    http_filters:
                      - name: envoy.filters.http.grpc_web
                      - name: envoy.filters.http.cors
                      - name: envoy.filters.http.router
      clusters:
        - name: frontend
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          load_assignment:
            cluster_name: frontend
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8080
        - name: backend
          connect_timeout: 0.25s
          type: logical_dns
          lb_policy: round_robin
          http2_protocol_options: {}
          load_assignment:
            cluster_name: backend
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8090
---
# Source: cilium/templates/cilium-agent-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  # Deprecated for removal in v1.10
  - create
  - list
  - watch
  - update

  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  - ciliumegressnatpolicies
  verbs:
  - '*'
---
# Source: cilium/templates/cilium-operator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/status
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - update
  - watch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/hubble-relay-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-relay
rules:
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/hubble-ui-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-relay
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-relay
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: "hubble-relay"
---
# Source: cilium/templates/hubble-ui-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: "hubble-ui"
---
# Source: cilium/templates/hubble-relay-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
spec:
  type: ClusterIP
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  labels:
    k8s-app: hubble-ui
  namespace: kube-system
spec:
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
  type: ClusterIP
---
# Source: cilium/templates/cilium-agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: cilium
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
            - matchExpressions:
              - key: beta.kubernetes.io/os
                operator: In
                values:
                - linux
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - cilium
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        startupProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        image: "quay.io/cilium/cilium:v1.10.3@sha256:8419531c5d3677158802882bdfe2297915c43f2ebe3649551aaac22de9f6d565"
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              - "--enable-debug=false"
              - "--cni-exclusive=true"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        name: cilium-agent
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
          # Needed to be able to load kernel modules
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
      hostNetwork: true
      initContainers:
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        env:
          - name: CGROUP_ROOT
            value: /run/cilium/cgroupv2
          - name: BIN_PATH
            value: /var/lib/rancher/k3s/data/current/bin
        command:
          - sh
          - -c
          # The statically linked Go program binary is invoked to avoid any
          # dependency on utilities like sh and mount that can be missing on certain
          # distros installed on the underlying host. Copy the binary to the
          # same directory where we install cilium cni plugin so that exec permissions
          # are available.
          - 'cp /usr/bin/cilium-mount /hostbin/cilium-mount && nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT; rm /hostbin/cilium-mount'
        image: "quay.io/cilium/cilium:v1.10.3@sha256:8419531c5d3677158802882bdfe2297915c43f2ebe3649551aaac22de9f6d565"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /hostproc
            name: hostproc
          - mountPath: /hostbin
            name: cni-path
        securityContext:
          privileged: true
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: CILIUM_WAIT_BPF_MOUNT
          valueFrom:
            configMapKeyRef:
              key: wait-bpf-mount
              name: cilium-config
              optional: true
        image: "quay.io/cilium/cilium:v1.10.3@sha256:8419531c5d3677158802882bdfe2297915c43f2ebe3649551aaac22de9f6d565"
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
          mountPropagation: HostToContainer
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - mountPath: /run/cilium/cgroupv2
          name: cilium-cgroup
          mountPropagation: HostToContainer
        - mountPath: /var/run/cilium
          name: cilium-run
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      # To mount cgroup2 filesystem on the host
      - hostPath:
          path: /proc
          type: Directory
        name: hostproc
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
        name: cilium-cgroup
      # To install cilium cni plugin in the host
      - hostPath:
          path:  /var/lib/rancher/k3s/data/current/bin
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: /var/lib/rancher/k3s/agent/etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
      - name: hubble-tls
        projected:
          sources:
          - secret:
              name: hubble-server-certs
              items:
                - key: ca.crt
                  path: client-ca.crt
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
              optional: true
---
# Source: cilium/templates/cilium-operator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        image: "quay.io/cilium/operator-generic:v1.10.3@sha256:337ebf27eae4fbad51cc4baf9110b3ec6753320dd33075bc136e2a1865be5eb5"
        imagePullPolicy: IfNotPresent
        name: cilium-operator
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      tolerations:
      - operator: Exists
      volumes:
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
# Source: cilium/templates/hubble-relay-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  labels:
    k8s-app: hubble-relay
  namespace: kube-system
spec:

  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "k8s-app"
                  operator: In
                  values:
                    - cilium
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: hubble-relay
          image: "quay.io/cilium/hubble-relay:v1.10.3@sha256:af8ff09fe374c307356a85b0e0c158359a2e7299f93280151301b7f2fac27339"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - mountPath: /var/run/cilium
            name: hubble-sock-dir
            readOnly: true
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
      restartPolicy: Always
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      terminationGracePeriodSeconds: 0
      volumes:
      - configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
        name: config
      - hostPath:
          path: /var/run/cilium
          type: Directory
        name: hubble-sock-dir
      - projected:
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: ca.crt
                  path: hubble-server-ca.crt
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
        name: tls
---
# Source: cilium/templates/hubble-ui-deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
  name: hubble-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
    spec:
      securityContext:
        runAsUser: 1001
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      containers:
        - name: frontend
          image: "quay.io/cilium/hubble-ui:v0.7.9@sha256:e0e461c680ccd083ac24fe4f9e19e675422485f04d8720635ec41f2ba9e5562c"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          resources:
            {}
        - name: backend
          image: "quay.io/cilium/hubble-ui-backend:v0.7.9@sha256:632c938ef6ff30e3a080c59b734afb1fb7493689275443faa1435f7141aabe76"
          imagePullPolicy: IfNotPresent
          env:
            - name: EVENTS_SERVER_PORT
              value: "8090"
            - name: FLOWS_API_ADDR
              value: "hubble-relay:80"
          ports:
            - containerPort: 8090
              name: grpc
          resources:
            {}
        - name: proxy
          image: "docker.io/envoyproxy/envoy:v1.18.2@sha256:e8b37c1d75787dd1e712ff389b0d37337dc8a174a63bed9c34ba73359dc67da7"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
              name: http
          resources:
            {}
          command: ["envoy"]
          args:
            [
              "-c",
              "/etc/envoy.yaml",
              "-l",
              "info"
            ]
          volumeMounts:
            - name: hubble-ui-envoy-yaml
              mountPath: /etc/envoy.yaml
              subPath: envoy.yaml
      volumes:
        - name: hubble-ui-envoy-yaml
          configMap:
            name: hubble-ui-envoy
