#+TITLE: Emacs config
#+PROPERTY: header-args :emacs-lisp :tangle yes :cache yes :results silent :comments link :exports code
#+AUTHOR: John Axel Eriksson
#+TOC: true

This is my emacs configuration. It's documented for my benefit. This lives within my [[https://nixos.org][Nix/NixOS]] monorepo called [[https://github.com/johnae/world][world]].

* Initialization

** Optimization
Here we do some basic optimizations to make emacs load faster and do "stuff" more efficiently.
*** Time startup
#+BEGIN_SRC elisp
   (add-hook 'emacs-startup-hook
      (lambda ()
        (message "Started emacs in %.03fs"
            (float-time (time-subtract after-init-time before-init-time)))))
#+END_SRC
*** Keep a reference to the actual file-name-handler.
#+BEGIN_SRC elisp
  (defvar file-name-handler-alist-actual file-name-handler-alist)
#+END_SRC

*** Set the file-name-handler to nil (because regexing is cpu intensive)
#+BEGIN_SRC elisp
(setq file-name-handler-alist nil)
#+END_SRC

*** Increase the gc threshold significantly for faster startup
#+BEGIN_SRC elisp
(setq gc-cons-threshold 100000000)
#+END_SRC

*** The default is very low - 4k, lsp server responses are easily much larger
#+BEGIN_SRC elisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC

*** Reset file-name-handler-alist after initialization
#+BEGIN_SRC elisp
(add-hook 'after-init-hook
  (lambda ()
    (garbage-collect)
    (setq file-name-handler-alist file-name-handler-alist-actual)) t)
#+END_SRC

*** This makes emacsclient fast when starting up, not entirely sure why tbh
#+BEGIN_SRC elisp
(setq-default xterm-query-timeout nil)
#+END_SRC

*** Disable startup messages
#+BEGIN_SRC elisp
  (setq
   inhibit-startup-echo-area-message t
   inhibit-startup-screen t
   initial-scratch-message nil)
#+END_SRC

*** Disable unnecessary UI widgets etc
#+BEGIN_SRC elisp
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (menu-bar-mode -1)
#+END_SRC
*** Skip loading default lib, use fundamental-mode
#+BEGIN_SRC elisp
(setq inhibit-default-init t
         initial-major-mode 'fundamental-mode)
#+END_SRC
*** Disable any native compilation at runtime - done by Nix
#+BEGIN_SRC elisp
(when (featurep 'nativecomp)
  (setq comp-deferred-compilation nil))
#+END_SRC
*** Use package autoloads provided by Nix
#+BEGIN_SRC elisp
(defvar package-quickstart t)
#+END_SRC
*** Misc performance tweaks
**** Skip trying a second pass through auto-mode-list
#+BEGIN_SRC elisp
(setq auto-mode-case-fold nil)
#+END_SRC
**** Enable so-long mode
#+BEGIN_SRC elisp
(global-so-long-mode 1)
#+END_SRC
** Setup
Some basic useful settings.
*** Don't create backup files, don't create #autosave# files
#+BEGIN_SRC elisp
(setq temporary-file-directory "~/.emacs.d/tmp/")
(unless (file-exists-p "~/.emacs.d/tmp")
  (make-directory "~/.emacs.d/tmp"))

(setq backup-inhibited t
         make-backup-files nil ; don't create backup~ files
         auto-save-default nil) ; don't create #autosave# files
#+END_SRC
*** Don't confirm org-babel eval. Somewhat dangerous. I live in the fast lane.
#+BEGIN_SRC elisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Disable impure packages (as in not already fetched by Nix)
#+BEGIN_SRC elisp
  (setq
     package-archives nil
     package-enable-at-startup nil
   )
#+END_SRC

*** Include common lisp emulation functions
#+BEGIN_SRC elisp
  (require 'cl-lib)
#+END_SRC

*** Initialize use-package
#+BEGIN_SRC elisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

*** Add notmuch to load-path
#+BEGIN_SRC elisp
  (add-to-list 'load-path (getenv "NOTMUCH_LOAD_PATH"))
#+END_SRC

*** Setup auth sources so we use pass gpg files
#+BEGIN_SRC elisp
  (setq auth-sources '((:source "~/.local/share/password-store/emacs/auth/authinfo.gpg")))
#+END_SRC

*** Set utf8 everywhere
#+BEGIN_SRC elisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
*** Set browser function - eg. which browser to open links in
#+BEGIN_SRC elisp
  (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "firefox")
#+END_SRC
*** Show trailing whitespace when programming
#+BEGIN_SRC elisp
(set-face-background 'trailing-whitespace "yellow")
(add-hook 'prog-mode-hook
  (lambda ()
    (setq show-trailing-whitespace t)))
#+END_SRC
*** I'm in Europe so I want dates to be displayed in European formats
#+BEGIN_SRC elisp
(setq european-date-style 'european
        calendar-set-date-style 'european
        calendar-week-start-day 1
        calendar-date-display-form
           '((if dayname
                 (concat dayname ", "))
             day " " monthname " " year))

(setq calendar-time-display-form
      '(24-hours ":" minutes))
#+END_SRC
*** Highlight matching parentheses
#+BEGIN_SRC elisp
(defun my-show-paren-mode ()
   "Enables 'show-paren-mode'."
   (setq show-paren-delay 0)
   (set-face-background 'show-paren-match (face-background 'default))
   (set-face-foreground 'show-paren-match "#def")
   (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
   (show-paren-mode 1))
(add-hook 'prog-mode-hook 'my-show-paren-mode)
#+END_SRC
*** Enable electric pair mode
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
*** Highlight current line when programming
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC
*** Use wl-clipboard for interprocess copy/paste
#+BEGIN_SRC elisp
(setq wl-copy-process nil)
(defun wl-copy (text)
  (setq wl-copy-process (make-process :name "wl-copy"
                                      :buffer nil
                                      :command '("wl-copy" "-f" "-n")
                                      :connection-type 'pipe))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))
(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil ; should return nil if we're the current paste owner
      (shell-command-to-string "wl-paste -n | tr -d \r")))
(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste)
#+END_SRC
*** Editor settings (tabs, spaces, newlines etc)
#+BEGIN_SRC elisp
(setq mode-require-final-newline t
         tabify nil
         tab-stop-list (number-sequence 2 120 2))
(setq-default tab-width 2
                      indent-tabs-mode nil)
#+END_SRC
*** Default shell to bash
Without this (if you're otherwise using fish for example) eshell prompts can be very sluggish - if you're doing anything fancy such as git status etc.
The problem comes from executing external commands which are run by your $SHELL. Tramp can also be negatively affected.
#+BEGIN_SRC elisp
(setq shell-file-name "bash")
#+END_SRC
** User interface
*** Set the default font
#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font 14"))
#+END_SRC
*** Set background alpha
#+BEGIN_SRC elisp
(set-frame-parameter (selected-frame) 'alpha '(96 . 96))
(add-to-list 'default-frame-alist '(alpha . (96 . 96)))
#+END_SRC
** Utility functions
Utility functions used here and there.
*** Returns the output of a shell command without trailing whitespace
#+BEGIN_SRC elisp
  (defun jae/shell-command-to-string-nows (cmd)
    "Return shell command output without trailing newline and whitespace."
    (replace-regexp-in-string "\n\\'" ""
      (replace-regexp-in-string "\\(\\`[[:space:]\n]*\\|[[:space:]\n]*\\'\\)" ""
        (shell-command-to-string cmd)
        )
      )
    )
#+END_SRC
*** Creates new empty numbered buffers
#+BEGIN_SRC elisp
(defun jae/new-empty-buffer ()
  "Create a new empty buffer.
New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc."
  (interactive)
  (let (($buf (generate-new-buffer "untitled")))
    (switch-to-buffer $buf)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)
    $buf
    ))
#+END_SRC
* Packages
Package setup.

** Performance
*** Adjust garbage collection based on activity (eg. gc on idle)
#+BEGIN_SRC elisp
  (use-package gcmh
    :hook (after-init-hook . gcmh-mode)
    :init
    (setq gcmh-idle-delay 5
             gcmh-high-cons-threshold (* 32 1024 1024)) ; 32MB
  )
#+END_SRC
** Integrates emacs with the pass password manager - disabled
#+BEGIN_SRC elisp
;; (use-package pass)
#+END_SRC
** Org mode packages
*** Org mode itself
#+BEGIN_SRC elisp
  (use-package org)
#+END_SRC
*** Org bullets - uses different utf8 characters for different bullet nesting levels, see: [[https://github.com/sabof/org-bullets][sabof/org-bullets]]
#+BEGIN_SRC elisp
(use-package org-bullets
 :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Org tree slide - presentation mode for org, see: [[https://github.com/takaxp/org-tree-slide][takaxp/org-tree-slide - disabled]]
#+BEGIN_SRC elisp
;;(use-package org-tree-slide
;;  :defer t
;;  :config
;;  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
;;  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
;;  )
#+END_SRC
** Evil Packages - Vim for emacs.
*** Evil itself
#+BEGIN_SRC elisp
  (use-package evil
    :init
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
  )
#+END_SRC
*** Evil collection - evil keybindings for different parts of Emacs and packages
#+BEGIN_SRC elisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil) ;; breaks esh-autosuggest
    (evil-collection-init)
  )
#+END_SRC
*** Evil org
#+BEGIN_SRC elisp
  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
  )
#+END_SRC
** Theming
*** All the icons for doom modeline
#+BEGIN_SRC elisp
  (use-package all-the-icons)
#+END_SRC
*** Doom themes
#+BEGIN_SRC elisp
  (use-package doom-themes)
#+END_SRC

*** Doom modeline
#+BEGIN_SRC elisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-icon 1)
    :config
    (doom-modeline-mode)
    )
#+END_SRC
*** Set default theme
#+BEGIN_SRC elisp
  (defvar jae:theme 'doom-nord)
  (load-theme jae:theme t)
#+END_SRC
** EShell
*** Settings
#+BEGIN_SRC elisp
  (require 'eshell)
  (require 'em-smart)
  (require 'em-tramp)
  (setq
      eshell-where-to-jump 'begin
      eshell-review-quick-commands nil
      eshell-smart-space-goes-to-end t
      eshell-glob-case-insensitive t
      eshell-scroll-to-bottom-on-input 'this
      eshell-buffer-shorthand t
      eshell-history-size 10000
      eshell-cmpl-ignore-case t)
#+END_SRC
*** Aliases
#+BEGIN_SRC elisp
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
  (defun eshell/exit () (eshell/x))
  (defun eshell/e (file) (find-file file))
  (add-hook 'eshell-first-time-mode-hook
       (lambda ()
         (eshell/alias "ll" "ls -lah $*" )
       )
  )
#+END_SRC
*** Helper functions
#+BEGIN_SRC elisp
  (defun jae/is-inside-git-tree ()
    "Returns true if inside git work tree."
    (string= (jae/shell-command-to-string-nows "git rev-parse --is-inside-work-tree 2>/dev/null")
                 "true"
                 ))

  (defun jae/git-unpushed-commits ()
    "Returns number of local commits not pushed."
    (if (jae/is-inside-git-tree)
        (let ((
               changes (jae/shell-command-to-string-nows "git log @{u}.. --oneline 2> /dev/null | wc -l")
               ))
          (if (string= changes "0")
              nil
            changes
            )
          )
      nil
      )
    )

  (defun jae/git-changes ()
    "Returns number of changes or nil."
    (if (jae/is-inside-git-tree)
        (let ((
               diffs (jae/shell-command-to-string-nows "git diff-index HEAD 2> /dev/null | wc -l")
               ))
          (if (string= diffs "0")
              nil
            diffs
            )
          )
      nil
      )
    )

  (defun jae/k8s-context ()
    "Return k8s context or nil"
    (let ((
           k8s-ctx (jae/shell-command-to-string-nows
                    "kubectl config current-context 2>/dev/null")
                   ))
      (if (string= k8s-ctx "")
          nil
        k8s-ctx
        )
      )
    )

  (defun jae/k8s-ns ()
    "Return k8s ns or nil"
    (let ((
           k8s-ns (jae/shell-command-to-string-nows
                    "kubens -c 2>/dev/null")
                   ))
      (if (string= k8s-ns "")
          nil
        k8s-ns
        )
      )
    )

  (defun jae/current-gcloud-project ()
    "Returns the current gcloud project."
    (let ((
           gcloud-project (
              jae/shell-command-to-string-nows
                 "cat ~/.config/gcloud/configurations/config_default | grep 'project =' | awk '{print $NF}'")
                          ))
      (if (string= gcloud-project "")
          nil
        gcloud-project
        )
      )
    )

  (defun pick-kubectx ()
    "Select k8s context"
    (interactive)
    (setenv "KUBECTX_IGNORE_FZF" "y")
    (ivy-read "Select kubernetes cluster: " (split-string (shell-command-to-string "kubectx") "\n" t)
              :action '(1
                         ("o" (lambda (x) (shell-command (concat "kubectx " x))))
                       )
              )
    )

  (defun pick-kubens ()
    "Select k8s namespace"
    (interactive)
    (setenv "KUBECTX_IGNORE_FZF" "y")
    (ivy-read "Select kubernetes namespace: " (split-string (shell-command-to-string "kubens") "\n" t)
              :action '(1
                       ("o" (lambda (x) (shell-command (concat "kubens " x))))
                       )
              )
    )

  (defun pick-gcp-project ()
    "Select GCP proejct"
    (interactive)
    (ivy-read "Select GCP Project: " (split-string (shell-command-to-string "gcloud projects list | tail -n +2 | awk '{print $1}'") "\n" t)
              :action '(1
                       ("o" (lambda (x) (shell-command (concat "gcloud config set project " x))))
                       )
              )
    )

  (defun go-to-project ()
    "Go to project"
    (interactive)
    (counsel-projectile-switch-project
     'counsel-projectile-switch-project-action-run-eshell)
    )
#+END_SRC
*** Prompt
#+BEGIN_SRC elisp
  (defmacro with-face (STR &rest PROPS)
    "Return STR propertized with PROPS."
    `(propertize ,STR 'face (list ,@PROPS)))

  (defmacro esh-section (NAME ICON FORM &rest PROPS)
    "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
    `(setq ,NAME
           (lambda () (when ,FORM
                   (-> ,ICON
                      (concat esh-section-delim ,FORM)
                      (with-face ,@PROPS))))))

  (defun esh-acc (acc x)
    "Accumulator for evaluating and concatenating esh-sections."
    (--if-let (funcall x)
        (if (s-blank? acc)
            it
          (concat acc esh-sep it))
      acc))

  (defun esh-prompt-func ()
    "Build `eshell-prompt-function'"
    (concat esh-header
            (-reduce-from 'esh-acc "" eshell-funcs)
            "\n"
            eshell-prompt-string))

  (esh-section esh-dir
               "\xf07c"  ;  (fontawesome folder)
               (abbreviate-file-name (eshell/pwd))
               '(:foreground "#81a1c1" :bold ultra-bold))

    (esh-section esh-git
               "\xf126"  ;  (git icon)
               (magit-get-current-branch)
               '(:foreground "#5e81ac"))

    (esh-section esh-git-changes
               "\xf071"  ;  (warn icon)
               (jae/git-changes)
               '(:foreground "#bf616a"))

    (esh-section esh-git-unpushed-commits
               "\xf714"  ;  (skull icon)
               (jae/git-unpushed-commits)
               '(:foreground "#bf616a"))

    (esh-section esh-k8s
               "\xf1b3 "  ;  (cubes icon)
               (format "%s (%s)" (jae/k8s-context) (jae/k8s-ns))
               '(:foreground "#5e81ac"))

    (esh-section esh-gcp
               "\xf1a0"  ;  (google icon)
               (jae/current-gcloud-project)
               '(:foreground "#5e81ac"))

  ;; Separator between esh-sections
  (setq esh-sep "  ")

  ;; Separator between an esh-section icon and form
  (setq esh-section-delim " ")

  ;; Eshell prompt header
  (setq esh-header "\n")

  ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
  ;; your login, these can be the same.
  (setq eshell-prompt-regexp "❯❯ ")
  (setq eshell-prompt-string "❯❯ ")

  ;; Choose which eshell-funcs to enable
  (setq eshell-funcs (list esh-dir esh-git
                           esh-git-changes
                           esh-git-unpushed-commits
                           esh-k8s esh-gcp
                           ))

  ;; Enable the new eshell prompt
  (setq eshell-prompt-function 'esh-prompt-func)
#+END_SRC
*** Auto suggestions a la fish
#+BEGIN_SRC elisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode))
#+END_SRC

*** Fish shell completion
#+BEGIN_SRC elisp
(use-package fish-completion
  :config
  (global-fish-completion-mode)
)
#+END_SRC
** Direnv integration
;; Direnv integration for emacs.
;; See: [[https://github.com/wbolster/emacs-direnv][https://github.com/wbolster/emacs-direnv]]
;; and ofc
;; https://direnv.net/]]
#+BEGIN_SRC elisp
(use-package direnv
  :init
  (add-hook 'prog-mode-hook #'direnv-update-environment)
  :config
  (direnv-mode)
  (add-to-list 'direnv-non-file-modes 'eshell-mode)
)
#+END_SRC
** VTerm - a faster replacement for Term (when you need a real terminal)
#+BEGIN_SRC elisp
  (use-package vterm)
#+END_SRC
** Zoom window - eg. use control-x control-z to zoom in / out a window (eg. "fullscreen" it).
#+BEGIN_SRC elisp
(use-package zoom-window
  :bind* ("C-x C-z" . zoom-window-zoom))
#+END_SRC
** Highlight numbers in source code
See: [[https://github.com/Fanael/highlight-numbers][https://github.com/Fanael/highlight-numbers]]
#+BEGIN_SRC elisp
(use-package highlight-numbers
  :config
  (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** Diff hl - highlight uncommitted changes
#+BEGIN_SRC elisp
(use-package diff-hl
  :config
  (setq diff-hl-side 'right)
  (global-diff-hl-mode t)
  ;;(diff-hl-flydiff-mode)
  (add-hook 'after-make-frame-functions(lambda (frame)
    (if (window-system frame)
      (diff-hl-mode)
      (diff-hl-margin-mode))))
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC
** Magit - the most awesome git editor integration
[[https://magit.vc/][Magit]] is possibly the most awesome git integration of any editor out there.
#+BEGIN_SRC elisp
(use-package magit
  :config
  (setq magit-auto-revert-mode nil
           magit-repository-directories
             '( "~/Development" ))
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )
#+END_SRC

** Ivy - completion tools
See: [[https://github.com/abo-abo/swiper][https://github.com/abo-abo/swiper]]
#+BEGIN_SRC elisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
           ivy-do-completion-in-region t
           ivy-count-format "%d/%d ")
  (add-hook 'shell-mode-hook (lambda ()
    (define-key shell-mode-map "\t" 'completion-at-point))))
#+END_SRC
** Which key
Which key will show (in a popup) any possible continuations of a currently entered incomplete command.
See: [[https://github.com/justbur/emacs-which-key][https://github.com/justbur/emacs-which-key]]
#+BEGIN_SRC elisp
(use-package which-key
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-side-window-max-width 0.33
        which-key-idle-delay 0.05)
  )
#+END_SRC
** Fringe helper
#+BEGIN_SRC elisp
(use-package fringe-helper
  :init
  (setq-default left-fringe-width  16)
  (setq-default right-fringe-width 16)
  :config
  )
#+END_SRC
** Programming and markup languages
*** LSP Mode
Language Server Protocol.
See: [[https://github.com/emacs-lsp/lsp-mode][emacs-lsp/lsp-mode]]
#+BEGIN_SRC elisp
(use-package lsp-mode
  ;;:after (direnv evil)
  :init
  (setq lsp-keymap-prefix "C-c a"
        lsp-prefer-capf t
        lsp-rust-server 'rust-analyzer)
  :config
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-snippet nil)
  (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                    :major-modes '(nix-mode)
                    :server-id 'nix))
  (setq lsp-file-watch-ignored '(
    "[/\\\\]\\.direnv$"
    ; SCM tools
    "[/\\\\]\\.git$"
    "[/\\\\]\\.hg$"
    "[/\\\\]\\.bzr$"
    "[/\\\\]_darcs$"
    "[/\\\\]\\.svn$"
    "[/\\\\]_FOSSIL_$"
    ; IDE tools
    "[/\\\\]\\.idea$"
    "[/\\\\]\\.ensime_cache$"
    "[/\\\\]\\.eunit$"
    "[/\\\\]node_modules$"
    "[/\\\\]\\.fslckout$"
    "[/\\\\]\\.tox$"
    "[/\\\\]\\.stack-work$"
    "[/\\\\]\\.bloop$"
    "[/\\\\]\\.metals$"
    "[/\\\\]target$"
    ; Autotools output
    "[/\\\\]\\.deps$"
    "[/\\\\]build-aux$"
    "[/\\\\]autom4te.cache$"
    "[/\\\\]\\.reference$"))
  :hook (
    (lsp-mode . lsp-enable-which-key-integration))
 )

(defun my-lsp ()
  "Ensures environment is updated before enabling lsp mode."
  (direnv-update-environment default-directory)
  (lsp-deferred))

(add-hook 'prog-mode-hook 'my-lsp)

(use-package lsp-ui
  :after lsp-mode
  :config
  (setq lsp-ui-doc-max-height 60)
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
)

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
*** Flycheck mode
**** The mode itself
On-the-fly syntax checking, see: [[https://www.flycheck.org/en/latest/][https://www.flycheck.org/en/latest/]]
#+BEGIN_SRC elisp
(use-package flycheck
  :config
  (global-flycheck-mode)
  (setq flycheck-idle-change-delay 2.0)
  ;; we've wrapped executable-find so this will run direnv-update-environment before finding executable
  (setq flycheck-executable-find
        (lambda (cmd) (executable-find cmd)))
)
#+END_SRC
**** Flycheck popups - error display
***** Popup tip
For showing errors in terminal (pos-tip doesn't do that - see below).
See: [[https://github.com/flycheck/flycheck-popup-tip][https://github.com/flycheck/flycheck-popup-tip]]
#+BEGIN_SRC elisp
(use-package flycheck-popup-tip)
#+END_SRC

***** Pos tip
For showing errors under point. Refers to above for similar terminal functionality.
See: [[https://github.com/flycheck/flycheck-pos-tip][https://github.com/flycheck/flycheck-pos-tip]]
#+BEGIN_SRC elisp
(use-package flycheck-pos-tip
  :config
  (setq flycheck-pos-tip-display-errors-tty-function #'flycheck-popup-tip-show-popup)
  (setq flycheck-pos-tip-timeout 0)
  (flycheck-pos-tip-mode))
#+END_SRC
*** Rust
#+BEGIN_SRC elisp
(use-package rust-mode
  :mode "\\.rs$"
  :config
  (setq rust-format-on-save t)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
)
#+END_SRC
*** Shell
#+BEGIN_SRC elisp
  #+END_SRC
*** Markdown mode
#+BEGIN_SRC elisp
(use-package markdown-mode)
#+END_SRC
*** Company mode
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends
and front-ends to retrieve and display completion candidates.
It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev,
etags, gtags, files, keywords and a few others.
#+BEGIN_SRC elisp
(use-package company
  :init
  (setq company-idle-delay 0.05
        company-echo-delay 0.05
        company-minimum-prefix-length 2
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil)
  :config
  (global-company-mode))
#+END_SRC
*** Company quick help
Show documentation popups when idling on a completion candidate.
See: [[https://github.com/expez/company-quickhelp][https://github.com/expez/company-quickhelp]]
#+BEGIN_SRC elisp
(use-package company-quickhelp
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay 0))
#+END_SRC
*** Golang
**** Go mode
#+BEGIN_SRC elisp
(use-package go-mode
  :config
  (setq gofmt-command "goimports")
)
(add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC
**** Go guru
#+BEGIN_SRC elisp
(use-package go-guru
  :config
  (go-guru-hl-identifier-mode))
#+END_SRC
**** Flycheck Gometalinter
#+BEGIN_SRC elisp
(use-package flycheck-gometalinter
  :after flycheck
  :config
  (setq flycheck-gometalinter-fast t
        flycheck-gometalinter-test t
        flycheck-gometalinter-deadlines "10s")
  (progn
    (flycheck-gometalinter-setup)))
#+END_SRC
**** Go Eldoc
#+BEGIN_SRC elisp
(use-package go-eldoc
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC
